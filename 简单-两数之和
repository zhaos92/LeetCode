1、两数之和
给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。

示例:
给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

第一次完成的代码如下：
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> two_nums;
        for (int i = 0; i < nums.size(); ++i)
        {
            for (int j = i + 1; j < nums.size(); ++j)
            {
                if (target == nums[i] + nums[j])
                {
                   two_nums.push_back(i); 
                   two_nums.push_back(j);
                   return two_nums;
                }
            }
        }

        return two_nums;
    }
};
时间复杂度：O(n)  空间复杂度：S(1)

第一次完成之后，其实是并想不到其他可以实现的方式了，所以看了看官方的解析，也由此学习了哈希表（HashMap）的用法。
